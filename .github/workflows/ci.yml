name: 🚀 CI/CD - Web App Build & Test

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/web/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/web/**'
      - 'package.json'
      - 'pnpm-lock.yaml'

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # ==========================================
  # Lint & Type Check
  # ==========================================
  lint-and-type-check:
    name: 🔍 Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 📥 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          
      - name: 🗂️ Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: 🧠 Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: 🔍 Run ESLint
        run: pnpm --filter web lint
        
      - name: 🔧 Type check
        run: pnpm --filter web type-check
        env:
          # Provide dummy env vars for type checking
          OPENAI_API_KEY: dummy
          SUPABASE_URL: https://dummy.supabase.co
          SUPABASE_SERVICE_ROLE: dummy
  
  # ==========================================
  # Build Test
  # ==========================================
  build:
    name: 🔨 Build Test
    runs-on: ubuntu-latest
    needs: [lint-and-type-check]
    
    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 📥 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          
      - name: 🗂️ Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: 🧠 Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: 🔨 Build application
        run: pnpm --filter web build
        env:
          # Provide dummy env vars for build
          OPENAI_API_KEY: dummy
          SUPABASE_URL: https://dummy.supabase.co
          SUPABASE_SERVICE_ROLE: dummy
          
      - name: 📊 Bundle analysis
        run: |
          echo "🎉 Build successful!"
          echo "📁 Build output:"
          ls -la apps/web/.next/
          echo "📦 Static files:"
          ls -la apps/web/.next/static/ | head -10
          
  # ==========================================
  # Security Check
  # ==========================================
  security:
    name: 🛡️ Security Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 📥 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          
      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: 🔍 Audit dependencies
        run: pnpm audit --prod
        continue-on-error: true
        
      - name: 🛡️ Check for vulnerabilities
        run: |
          echo "🔍 Checking for known vulnerabilities..."
          pnpm audit --audit-level moderate --prod || echo "⚠️ Some vulnerabilities found - review required"

  # ==========================================
  # Deployment Ready Check
  # ==========================================
  deployment-ready:
    name: 🚀 Deployment Ready
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: ✅ All checks passed
        run: |
          echo "🎉 All CI checks passed!"
          echo "🚀 Ready for deployment to production"
          echo "📋 Summary:"
          echo "  ✅ Linting passed"
          echo "  ✅ Type checking passed" 
          echo "  ✅ Build successful"
          echo "  ✅ Security check completed"
          
      - name: 📤 Notify deployment readiness
        if: success()
        run: |
          echo "::notice::Fred Wav Chatbot is ready for deployment! 🚀"